import sys
import pygame
import datetime
import math
import pygame.freetype
import time
import random

pygame.init()
GAME_FONT = pygame.freetype.Font("DayDream.ttf", 24)



def ZeroField(n):
    return [[0] * n for i in range(n)]

def BetterZeroField(x, y):
    return [[0] * x for i in range(y)]

def BetterOneField(x, y):
    return [[1] * x for i in range(y)]

def FalseField(x, y):
    return [[False] * x for i in range(y)]

def detectCollision(blockHeight, blockWidth, falseboard, fall, delta, board, NumHeight, collision):
    # for y in range(blockHeight):
    #         for x in range(blockWidth):
    #             print(y, x)
    #             print(falseboard)
    #             if(falseboard[y - 1][x] == 1 and ((y + fall > NumHeight - 1) or (board[y + fall - 1][x + delta - 1] == 1))):
    #                 a = fall
    #                 fall = 0
    #                 for y in range(blockHeight):
    #                     for x in range(blockWidth):
    #                         print(y + fall)
    #                         print(x+delta)
    #                         if(falseboard[y][x] == 1):
    #                             print(y + a - 1)
    #                             print(x + delta)
    #                             board[y + a - 1][x + delta] = 1
    #                 print(board)
    #                 falseboard = BetterZeroField(3, 3)
    #                 block = 0
    for y in range(blockHeight):
            for x in range(blockWidth):
                print(y, x)
                print(falseboard)
                if(falseboard[y - 1][x] == 1):
                    if(y + fall >= NumHeight - 1 or board[y + fall - 1][x + delta] == 1):
                        collision = True
    return collision
                    




def rotate(a):
    nRows = len(a[0])
    nCol = len(a)
    b = []
    for x in range(nRows):
        b.append([])
        for y in range(nCol - 1, -1, -1):
            b[x].append(a[y][x])
    return b
    


def RandomNum():
    x = random.randint(1, 6) 
    return x
        
def DFS(map, x, y, visited):
    visited[y][x] = True
    a = True
    b = True
    c = True
    d = True
    if(y >= 1 and map[y][x] == map[y - 1][x] and visited[y - 1][x] == False):
        DFS(map, x, y - 1, visited)
    if(x >= 1 and map[y][x] == map[y][x - 1] and visited[y][x - 1] == False):
        DFS(map, x - 1, y, visited)
    if(x < len(map[y]) - 1 and map[y][x] == map[y][x + 1] and visited[y][x + 1] == False):
        DFS(map, x + 1, y, visited)
    if(y < len(map) - 1 and map[y][x] == map[y + 1][x] and visited[y + 1][x] == False):
        DFS(map, x, y + 1, visited)



def main():
    collision = False
    width = 700
    height = 850
    cellSide = 50
    NumWidth = int(width/cellSide)
    NumHeight = int(height/cellSide)
    score = 0
    block = False
    screen = pygame.display.set_mode((width + 200, height))
    running = True
    xIdx = 2
    yIdx = 2
    delta = 0
    visited = FalseField(NumWidth, NumHeight)
    blockTop = 0
    blockWidth = 2
    blockHeight = 3
    fall = 0


    falseboard = BetterZeroField(blockWidth, blockHeight)
    board = BetterZeroField(NumWidth, NumHeight)
    # board = [
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    #         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    #         ]
    while running:
        pygame.display.flip()
        screen.fill((0, 0, 0))

        text_surface, rect = GAME_FONT.render("Score:", (255, 0, 0))
        text, rect = GAME_FONT.render(str(score), (255, 0, 0))
        tetris, rect = GAME_FONT.render("TETRIS", (random.randint(0, 255), 0, random.randint(0, 255)))
        screen.blit(text_surface, (720, 300))
        screen.blit(tetris, (720, 150))
        screen.blit(text, (720, 340))

        pygame.draw.line(screen, (255, 255, 255), (701, 0), (701, 850), 1)
        # pygame.draw.rect(screen, (255, 255, 255), (xIdx * cellSide + 1, yIdx * cellSide + 1, cellSide - 1, cellSide - 1))

            
     


        for y in range(len(board)):
            for x in range(len(board[0])):
                if(board[y][x] == 1):
                    pygame.draw.rect(screen, (255, 255, 0), (x * cellSide + 1, y * cellSide + 1, cellSide - 1, cellSide - 1))
                elif(board[y][x] == 2):
                    pygame.draw.rect(screen, (255, 0, 255), (x * cellSide + 1, y * cellSide + 1, cellSide - 1, cellSide - 1))
                else:
                    pygame.draw.rect(screen, (0, 0, 0), (x * cellSide + 1, y * cellSide + 1, cellSide - 1, cellSide - 1))

        for y in range(len(falseboard)):
            for x in range(len(falseboard[0])):
                if(falseboard[y][x] == 1):
                    pygame.draw.rect(screen, (255, 255, 0), (cellSide * (x + delta) + 1, cellSide * (y + fall) + 1, cellSide - 1, cellSide - 1))
                elif(falseboard[y][x] == 2):
                    pygame.draw.rect(screen, (255, 0, 255), (cellSide * (x + delta) + 1, cellSide * (y + fall) + 1, cellSide - 1, cellSide - 1))
                else:
                    pygame.draw.rect(screen, (0, 0, 0), (cellSide * (x + delta) + 1, cellSide * (y + fall) + 1, cellSide - 1, cellSide - 1))

        # for y in range(NumHeight - 1, 0, -1):
        #     for x in range(NumWidth):
        #         if(falseboard[y][x] != 0 and y < NumHeight - 1 and x < NumWidth - 1 and falseboard[y + 1][x + delta] == 0  and board[y + 1][x + delta] == 0 and x + delta >= 0 and x + delta <= NumWidth):
        #             falseboard[y + 1][x + delta] = falseboard[y][x]
        #             falseboard[y][x] = 0
        #             # visited[y + 1][x + delta] = visited[y][x]
        #             # visited[y][x] = False
        #             pygame.time.delay(40)

        # for y in range(NumHeight - 1):
        #     for x in range(NumWidth):
        #         if(falseboard[NumHeight - 1][x] != 0 and visited[NumHeight - 1][x] == True):
        #             for y in range(NumHeight - 1, 0, -1):
        #                 for x in range(NumWidth):
        #                     if (falseboard[y][x] != 0):
        #                         board[y][x] = falseboard[y][x]
        #             falseboard = BetterZeroField(NumWidth, NumHeight)
        #             block = False
        #             visited = FalseField(NumWidth, NumHeight)

        # for y in range(NumHeight - 1):
        #     for x in range(NumWidth):
        #         if(falseboard[y][x] != 0 and board[y + 1][x] != 0):
        #             for y in range(NumHeight - 1):
        #                 for x in range(NumWidth):
        #                     if(board[y][x] == 0):
        #                         board[y][x] = falseboard[y][x]
        #             falseboard = BetterZeroField(NumWidth, NumHeight)
        #             block = False
        #             visited = FalseField(NumWidth, NumHeight)


        # for y in range(NumHeight - 1):
        #     for x in range(NumWidth):
        #         if(board[y][x] == ):

        fall += 1
        # for y in range(0, blockHeight):
        #     for x in range(0, blockWidth):
        #         print(y, x)
        #         print(falseboard)
        #         if(falseboard[y][x] == 1 and (y + fall > NumHeight - 1) or (y + fall < NumHeight - 1 and board[y + fall - 1][x + delta] == 1)):
        #             for y in range(blockHeight):
        #                 for x in range(blockWidth):
        #                     print(y + fall)
        #                     print(x+delta)
        #                     if(falseboard[y][x] == 1):
        #                         board[y + fall - 1][x + delta] = 1
        #             print(board)
        #             falseboard = BetterZeroField(3, 3)
        #             fall = 0
        #             block = 0
        
        collision = detectCollision(blockHeight, blockWidth, falseboard, fall, delta, board, NumHeight, collision)

        if(collision == True):
            collision = False
            for y in range(len(falseboard)):
                for x in range(len(falseboard[0])):
                    if(falseboard[y][x] == 1):
                        board[y + fall][x + delta] = 1
            fall = 0
            falseboard = BetterZeroField(3, 3)
            block = False

                   

        pygame.time.delay(100)


        




        # This eliminates the lines
        for y in range(NumHeight - 1, 0, -1):
            a = 0
            # for x in range(NumWidth - 1):
            #     if(falseboard[y][x] != 0):
            #         a += 1
            if(a >= NumWidth - 1):
                for x in range(NumWidth - 1):
                    board[y][x] = 0
                score += 100

        # for y in range(NumHeight - 1, 0, -1):
        #     for x in range(NumWidth):
        #         if(board[y][x] != 0 and y < NumHeight and board[y][x + delta] == 0):
        #             print("x")
        #             board[y][x] = board[y][x + delta]
        #             board[y][x + delta] = 0

        # for y in range(NumHeight - 1, 0, -1):
        #     for x in range(NumWidth):
        #         if(falseboard[y][x] != 0):
        #             DFS(falseboard, x, y, visited)
        #             print(x, y)
        #             pygame.draw.rect(screen, (255, 0, 0), (x * cellSide + 1, y * cellSide + 1, cellSide, cellSide), 1)
                    

        if(block == False):
            BLOCK = RandomNum()
            # print(BLOCK)
            if (BLOCK == 1):
                falseboard = BetterZeroField(2, 3)
                falseboard[1][0] = 1
                falseboard[0][0] = 1
                falseboard[2][0] = 1
                falseboard[1][1] = 1
            elif (BLOCK == 2):
                falseboard = BetterZeroField(2, 3)
                falseboard[0][1] = 1
                falseboard[1][0] = 1
                falseboard[1][1] = 1
                falseboard[0][0] = 1
            elif (BLOCK == 3):
                falseboard = BetterZeroField(2, 3)
                falseboard[0][0] = 1
                falseboard[1][0] = 1
                falseboard[1][1] = 1
                falseboard[2][0] = 1
            elif (BLOCK == 4):
                falseboard = BetterZeroField(2, 3)
                falseboard[2][0] = 1
                falseboard[0][1] = 1
                falseboard[1][1] = 1
                falseboard[1][0] = 1
               
            elif (BLOCK == 5):
                falseboard = BetterZeroField(2, 3)
                falseboard[0][1] = 1
                falseboard[1][1] = 1
                falseboard[2][1] = 1
                falseboard[2][0] = 1
               
            elif (BLOCK == 6):
                falseboard = BetterZeroField(2, 3)
                falseboard[0][0] = 1
                falseboard[1][0] = 1
                falseboard[2][0] = 1
                falseboard[2][1] = 1
                
            elif (BLOCK == 7):
                falseboard = BetterZeroField(1, 4)
                blockWidth = 1
                blockHeight = 4

                falseboard[0][0] = 1
                falseboard[1][0] = 1
                falseboard[2][0] = 1
                falseboard[3][0] = 1
            block = True
            # for y in range(blockHeight):
            #     for x in range(blockWidth):
            #         if(falseboard[y][x] != 0):
            #             DFS(board, x, y, visited)
        
        
        

            

            
               

        




        for events in pygame.event.get():
            if events.type == pygame.QUIT:
                running = False
            elif events.type == pygame.KEYDOWN:
                if events.key == pygame.K_LEFT:
                        if(xIdx > 1):
                            xIdx -= 1
                            



                            delta += -1
                elif events.key == pygame.K_RIGHT:
                        if(xIdx < width/cellSide):
                            xIdx += 1
                            delta += 1
                elif events.key == pygame.K_UP:
                    print("w", NumWidth)
                    print("h", NumHeight)
                    g = NumWidth
                    NumWidth = NumHeight
                    NumHeight = g
                    falseboard = rotate(falseboard)
                    print(falseboard)
                    print("w", NumWidth)
                    print("h", NumHeight)

                    
                elif events.key == pygame.K_DOWN:
                    temparray = BetterZeroField(blockHeight, blockWidth)
                    for y in range(blockWidth):
                        for x in range(blockHeight):
                            temparray[y][x] = falseboard[x][y]
                    falseboard = temparray
                    q = blockHeight
                    blockHeight = blockWidth
                    blockWidth = q
                    
                elif events.key == pygame.K_SPACE:
                    print(board)
                    
                # elif events.key == pygame.K_DOWN:
                #     temparray = BetterZeroField(3, 3)
                #     for y in range(3):
                #         for x in range(3):
                #             temparray[y][x] = falseboard[x][y]
                #     falseboard = temparray
                    
                    


main()